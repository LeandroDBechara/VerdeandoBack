// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USUARIO
  COLABORADOR
}

enum EstadoIntercambio {
  PENDIENTE
  REALIZADO
  CANCELADO
  EXPIRADO
}

//Falta: comunidad(consultar con grupo);
//caminos no felices

model Usuario {
  id                String   @id @default(uuid())
  nombre            String
  apellido          String
  fechaDeNacimiento DateTime
  email             String   @unique
  password          String
  fotoPerfil        String?
  puntos            Int      @default(0)
  direccion         String?

  rol                Role     @default(USUARIO)
  fechaAlta          DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  isDeleted          Boolean  @default(false)

  comunidadId String?    @unique
  comunidad   Comunidad? @relation(fields: [comunidadId], references: [id])

  colaborador Colaborador?
  canje       Canje[]
  intercambio Intercambio[]
  guardado    Guardado[]
}

model Guardado {
  id                 String   @id @default(uuid())
  juegoId            String   @unique
  nombre             String
  datosDeGuardado    Bytes
  fechaAlta          DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  isDeleted          Boolean  @default(false)

  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model Colaborador {
  id              String @id @default(uuid())
  cvu             String
  domicilioFiscal String
  cuitCuil        String

  fechaAlta          DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  isDeleted          Boolean  @default(false)

  usuarioId   String        @unique
  usuario     Usuario       @relation(fields: [usuarioId], references: [id])
  intercambio Intercambio[]
  puntoVerde  PuntoVerde[]
}

model Comunidad {
  id          String    @id @default(uuid())
  nombre      String
  descripcion String
  usuarios    Usuario[]
  puntos      Int       @default(0)
  historial   String
  isDeleted   Boolean   @default(false)
}

model Canje {
  id            String   @id @default(uuid())
  fechaDeCanjeo DateTime @default(now())
  isDeleted     Boolean  @default(false)

  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  recompensaId String
  recompensa   Recompensa @relation(fields: [recompensaId], references: [id])
}

model Recompensa {
  id          String  @id @default(uuid())
  titulo      String
  descripcion String
  foto        String?
  puntos      Int
  cantidad    Int
  isDeleted   Boolean @default(false)
  canjes      Canje[]
}

model Intercambio {
  id             String            @id @default(uuid())
  pesoTotal      Int               @default(0)
  totalPuntos    Int               @default(0)
  fecha          DateTime          @default(now())
  fechaLimite    DateTime?
  fechaRealizado DateTime?
  estado         EstadoIntercambio @default(PENDIENTE)
  isDeleted      Boolean           @default(false)
  token          String?

  detalleIntercambio DetalleIntercambio[]

  usuarioId     String
  usuario       Usuario      @relation(fields: [usuarioId], references: [id])
  puntoVerdeId  String?
  puntoVerde    PuntoVerde?  @relation(fields: [puntoVerdeId], references: [id])
  colaboradorId String?
  colaborador   Colaborador? @relation(fields: [colaboradorId], references: [id])

  eventoId String?
  evento   Evento? @relation(fields: [eventoId], references: [id])
}

model Residuo {
  id                 String               @id @default(uuid())
  material           String
  puntosKg           Int
  isDeleted          Boolean              @default(false)
  detalleIntercambio DetalleIntercambio[]
}

model DetalleIntercambio {
  id          String  @id @default(uuid())
  pesoGramos  Int
  puntosTotal Int
  isDeleted   Boolean @default(false)
  residuoId   String
  residuo     Residuo @relation(fields: [residuoId], references: [id])

  intercambioId String?
  intercambio   Intercambio? @relation(fields: [intercambioId], references: [id])
}

model PuntoVerde {
  id                String   @id @default(uuid())
  latitud           Float
  longitud          Float
  direccion         String
  nombre            String
  descripcion       String?
  imagen            String?
  diasHorarioAtencion String
  isDeleted         Boolean  @default(false)
  residuosAceptados String[]

  colaboradorId String
  colaborador   Colaborador   @relation(fields: [colaboradorId], references: [id])
  intercambio   Intercambio[]
}

model Evento {
  id                     String   @id @default(uuid())
  titulo                 String
  descripcion            String
  imagen                 String?
  fechaInicio            DateTime
  fechaFin               DateTime
  codigo                 String?
  multiplicador          Float    @default(1.0)
  puntosVerdesPermitidos String[]
  isDeleted              Boolean  @default(false)

  intercambio Intercambio[]
}
