// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USUARIO
  COLABORADOR
}

enum EstadoIntercambio {
  PENDIENTE
  REALIZADO
  CANCELADO
}

model Usuario {
  id                String   @id @default(uuid())
  nombre            String
  apellido          String
  fechaDeNacimiento DateTime
  email             String   @unique
  contrasenia       String
  fotoPerfil        String?
  puntos            Int      @default(0)
  direccion         String?

  rol                Role     @default(USUARIO)
  proveedorAuth      String?
  proveedorId        String?
  fechaAlta          DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  isDeleted          Boolean  @default(false)

  comunidadId String?    @unique
  comunidad   Comunidad? @relation(fields: [comunidadId], references: [id])

  colaborador Colaborador?
  canje       Canje[]
  intercambio Intercambio[]
}

model Colaborador {
  id        String @id @default(uuid())
  cvu       String
  domicilioFiscal String
  cuitCuil  String

  fechaAlta          DateTime @default(now())
  fechaActualizacion DateTime @updatedAt
  isDeleted          Boolean  @default(false)

  usuarioId   String        @unique
  usuario     Usuario       @relation(fields: [usuarioId], references: [id])
  intercambio Intercambio[]
  puntoVerde  PuntoVerde[]
}

model Comunidad {
  id          String    @id @default(uuid())
  nombre      String
  descripcion String
  usuarios    Usuario[]
  puntos      Int       @default(0)
  historial   String
  isDeleted   Boolean   @default(false)
}

model Canje {
  id            String   @id @default(uuid())
  fechaDeCanjeo DateTime @default(now())
  totalPuntos   Int      @default(0)
  isDeleted     Boolean  @default(false)

  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  recompensaId String
  recompensa   Recompensa @relation(fields: [recompensaId], references: [id])
}

model Recompensa {
  id          String @id @default(uuid())
  titulo      String
  descripcion String
  puntos      Int
  cantidad    Int
  isDeleted   Boolean  @default(false)
  canjes      Canje[]
}

model Intercambio {
  id          String   @id @default(uuid())
  pesoTotal   Int      @default(0)
  totalPuntos Int      @default(0)
  fecha       DateTime @default(now())
  fechaLimite DateTime?
  fechaRealizado DateTime?
  estado      EstadoIntercambio   @default(PENDIENTE)
  isDeleted   Boolean  @default(false)
  token       String?

  detalleIntercambio DetalleIntercambio[]

  usuarioId     String
  usuario       Usuario     @relation(fields: [usuarioId], references: [id])
  puntoVerdeId  String?
  puntoVerde    PuntoVerde?  @relation(fields: [puntoVerdeId], references: [id])
  colaboradorId String?
  colaborador   Colaborador? @relation(fields: [colaboradorId], references: [id])

  eventoId String?
  evento   Evento? @relation(fields: [eventoId], references: [id])
}

model Residuo {
  id       String @id @default(uuid())
  material String
  puntosKg Int
  isDeleted Boolean @default(false)
  detalleIntercambio DetalleIntercambio[]
}

model DetalleIntercambio {
  id          String @id @default(uuid())
  pesoGramos  Int
  puntosTotal Int
  isDeleted   Boolean @default(false)
  residuoId String
  residuo   Residuo @relation(fields: [residuoId], references: [id])

  intercambioId String?
  intercambio   Intercambio? @relation(fields: [intercambioId], references: [id])
}

model PuntoVerde {
  id           String @id @default(uuid())
  latitud      Float
  longitud     Float
  direccion    String
  nombre       String
  descripcion  String?
  imagen       String?
  diasAtencion String
  horario      String
  isDeleted    Boolean  @default(false)

  colaboradorId String
  colaborador   Colaborador @relation(fields: [colaboradorId], references: [id])

  intercambio Intercambio[]
  evento      EventoOnPuntoVerde[]
}

model Evento {
  id            String   @id @default(uuid())
  titulo        String
  descripcion   String
  imagen        String
  fechaInicio   DateTime
  fechaFin      DateTime
  codigo        String
  multiplicador Float    @default(1.2)
  isDeleted     Boolean  @default(false)

  puntoVerde EventoOnPuntoVerde[]

  intercambio Intercambio[]
}

model EventoOnPuntoVerde {
  eventoId String
  evento   Evento @relation(fields: [eventoId], references: [id])

  puntoVerdeId String
  puntoVerde   PuntoVerde @relation(fields: [puntoVerdeId], references: [id])
  isDeleted    Boolean   @default(false)

  @@id([eventoId, puntoVerdeId])
}
